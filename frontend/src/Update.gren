module Update exposing ( update )

import Browser.Navigation
import Data
import Http
import Json.Decode as Decode
import Json.Encode as Encode
import LocalStorage
import Message exposing (..)
import Model exposing (..)
import Task


update :
    Msg
    -> Model
    -> { model : Model
       , command : Cmd Msg
       }
update msg model =
    case msg of
        OnSidebarFileClicked file ->
            let
                updatedModel =
                    { model | selectedFile = Just file }

                folderName =
                    case model.folderName of
                        FolderName name ->
                            name

                        New ->
                            "new"
            in
            { model = updatedModel
            , command =
                Task.attempt
                    (\result ->
                        let
                            _ =
                                Debug.log "result" (Debug.toString result)
                        in
                        NoOp
                    )
                    (LocalStorage.set ("selected-file" ++ "_" ++ folderName) file.name)
            }

        NoOp ->
            { model = model
            , command = Cmd.none
            }

        OnGotSelectedFileFromLocalStorage result ->
            case result of
                Ok fileName ->
                    let
                        selectedFile =
                            Array.filter (\f -> f.name == fileName) model.files
                                |> Array.get 0
                    in
                    { model = { model | selectedFile = selectedFile }
                    , command = Cmd.none
                    }

                Err _ ->
                    { model = model
                    , command = Cmd.none
                    }

        OnSaveButtonClicked ->
            case model.folderName of
                FolderName fName ->
                    let
                        encodedRequest =
                            Encode.encode 0
                                <| Data.saveRequestEncoder fName model.files

                        _ =
                            Debug.log "encodedRequest" (Debug.toString encodedRequest)

                        request =
                            Http.post
                                { url = "/api/save"
                                , body = Http.stringBody "application/json" encodedRequest
                                , expect = Http.expectString GotSaveResponse
                                }
                    in
                    { model = model
                    , command = request
                    }

                New ->
                    let
                        encodedRequest =
                            Encode.encode 0
                                <| Data.createNewProjectRequestEncoder model.files

                        -- _ =
                        --     Debug.log "encodedRequest" (Debug.toString encodedRequest)
                        -- request =
                        --     Http.post
                        --         { url = "/api/create"
                        --         , body = 
                        --         , expect = Http.jsonBody (\data -> GotResponse (Decode.decodeValue Data.newProjectResultDecoder data))
                        --         }               
                        postCreateNewProject : Cmd Msg
                        postCreateNewProject =
                            Http.post
                                { url = "/api/create"
                                , body = Http.stringBody "application/json" encodedRequest
                                , expect = Http.expectJson GotCreateNewProjectResponse folderNameDecoder
                                }

                        folderNameDecoder : Decode.Decoder String
                        folderNameDecoder =
                            Decode.field "folderName" Decode.string
                    in
                    { model = model
                    , command = postCreateNewProject
                    }

        GotSaveResponse response ->
            let
                _ =
                    Debug.log "response" response
            in
            { model = { model | reloadIframeHack = model.reloadIframeHack + 1 }
            , command = Cmd.none
            }

        GotCreateNewProjectResponse resp ->
            let
                _ =
                    Debug.log "resp" resp
            in
            case resp of
                Ok folderName ->
                    { model = model
                    , command = Browser.Navigation.load ("/project/" ++ folderName)
                    }

                Err err ->
                    { model = model
                    , command = Cmd.none
                    }

        OnCodeEditorChanged code ->
            case model.selectedFile of
                Just file ->
                    let
                        updatedFile =
                            { file | content = code }

                        updatedFiles =
                            Array.map
                                (\f ->
                                    if f.name == file.name then
                                        updatedFile
                                    else
                                        f
                                )
                                model.files

                        updatedModel =
                            { model | files = updatedFiles }
                    in
                    { model = updatedModel
                    , command = Cmd.none
                    }

                Nothing ->
                    { model = model
                    , command = Cmd.none
                    }
