module View exposing ( view )

import Html as H
import Html.Attributes as HA
import Html.Events as HE
import Json.Decode as Decode
import Json.Encode as Encode
import Message exposing (..)
import Model exposing (..)


view : Model -> H.Html Msg
view model =
    H.div
        [ HA.class "w-screen h-screen"
        , HA.class "flex"
        , HA.class "bg-slate-900"
        ]
        [ viewSidebar model
        , viewRight model
        , if model.showNewFileModal then
            viewCreateNewFileModal model
          else
            H.text ""
        , case model.showDeleteFileModal of
            Just fileName ->
                viewDeleteFileModal model fileName

            Nothing ->
                H.text ""
        , case model.showUpdateFileNameModal of
            Just { newName } ->
                viewUpdateFileNameModal model newName

            Nothing ->
                H.text ""
        ]



-- VIEW RIGHT


viewRight model =
    H.div
        [ HA.class "w-full flex-1"
        , HA.class "flex flex-col"
        ]
        [ viewRightTopBar model
        , H.div
            [ HA.class "w-full"
            , HA.class "flex-1 flex flex-row"
            ]
            [ viewCodeEditor model
            , viewIframe model
            ]
        ]


viewRightTopBar model =
    H.div
        [ HA.class "w-full h-10"
        , HA.class "flex items-center"
        , HA.class "px-2"
        , HA.class "bg-indigo-800"
        , HA.class "border-b-2 border-indigo-600"
        ]
        [ H.button
            [ HA.class "h-8"
            , HA.class "text-white"
            , HA.class "p-2"
            , HA.class "bg-orange-500"
            , HA.class "flex justify-center items-center"
            , HE.onClick OnSaveButtonClicked
            ]
            [ H.text "Save"
            ]
        ]


viewCodeEditor : Model -> H.Html Msg
viewCodeEditor model =
    let
        onCut : (String -> msg) -> H.Attribute msg
        onCut tagger =
            HE.stopPropagationOn "cut" (Decode.map alwaysPropagate (Decode.map tagger HE.targetValue))

        onPaste : (String -> msg) -> H.Attribute msg
        onPaste tagger =
            HE.stopPropagationOn "paste" (Decode.map alwaysPropagate (Decode.map tagger HE.targetValue))

        alwaysPropagate :
            msg
            -> { message : msg
               , stopPropagation : Bool
               }
        alwaysPropagate msg =
            { message = msg
            , stopPropagation = False
            }
    in
    H.div
        [ HA.class "flex-1"
        , HA.class "bg-slate-900"
        , HA.class "w-full"
            -- , HE.onInput FromGren_Trigger_FromJS_SetCurrentFileContent
            -- , onCut
            --     (\v ->
            --         -- let
            --         --     _ =
            --         --         Debug.log "onCut" v
            --         -- in
            --         FromGren_Trigger_FromJS_SetCurrentFileContent v
            --     )
            -- , onPaste
            --     (\v ->
            --         -- let
            --         --     _ =
            --         --         Debug.log "onPaste" v
            --         -- in
            --         FromGren_Trigger_FromJS_SetCurrentFileContent v
            --     )
        ]
        (case model.selectedFileName of
            Just fileName ->
                let
                    maybeFile =
                        Array.findFirst (\file -> file.name == fileName) model.files
                in
                case maybeFile of
                    Just file ->
                        [ H.node
                            "wc-monaco-editor"
                            [ HA.attribute "language" "elm"
                            ]
                            []
                        ]

                    Nothing ->
                        [ H.div
                            [ HA.class "text-white"
                            ]
                            [ H.text "File not found"
                            ]
                        ]

            Nothing ->
                [ H.div
                    [ HA.class "text-white"
                    ]
                    [ H.text "No file selected"
                    ]
                ]
        )


viewIframe : Model -> H.Html Msg
viewIframe model =
    H.div
        [ HA.class "flex-1"
        , HA.class "w-full"
        , HA.class "border-2 border-red-500"
        , HA.class "bg-white"
        ]
        (case model.folderName of
            FolderName folderName ->
                [ H.iframe
                    [ HA.class "w-full h-full"
                    , HA.src ("/iframe/" ++ folderName ++ ("?" ++ String.fromInt model.reloadIframeHack))
                    ]
                    []
                ]

            New ->
                [ H.div
                    [ HA.class "w-full h-full"
                    ]
                    []
                ]
        )



-- SIDE BAR


viewSidebar : Model -> H.Html Msg
viewSidebar model =
    H.div
        [ HA.class "h-full"
        , HA.class "bg-indigo-800"
        , HA.style "width" (String.fromInt model.sidebarWidth ++ "px")
        ]
        [ viewSideBarTopPanel model
        , viewSidebarFiles model
        ]


viewSideBarTopPanel : Model -> H.Html Msg
viewSideBarTopPanel model =
    H.div
        [ HA.class "w-full h-10"
        , HA.class "bg-indigo-800"
        , HA.class "border-b-2 border-indigo-600"
        , HA.class "flex justify-end items-center"
        , HA.class "px-2"
        ]
        [ H.button
            [ HE.onClick OnNewFileButtonClicked
            ]
            [ H.i
                [ HA.class "gg-file-add"
                , HA.class "text-white"
                ]
                []
            ]
        ]


viewSidebarFiles : Model -> H.Html Msg
viewSidebarFiles model =
    H.div
        [ HA.class ""
        , HA.class "bg-indigo-800"
        , HA.style "width" (String.fromInt model.sidebarWidth ++ "px")
        ]
        (Array.map (viewSidebarFile model) model.files)


viewSidebarFile : Model -> GrenFile -> H.Html Msg
viewSidebarFile model file =
    let
        isSelectedFile =
            case model.selectedFileName of
                Just fileName ->
                    fileName == file.name

                Nothing ->
                    False
    in
    H.button
        [ HA.class "h-8"
        , HA.class "bg-indigo-800 text-slate-200"
        , HA.class "w-full"
        , HA.class "flex justify-start items-center"
        , HA.class "pl-2"
        , HA.classList
            [ { class = "text-white bg-indigo-600"
              , enabled = isSelectedFile
              }
            ]
        , HE.onClick (OnSidebarFileClicked file)
        ]
        (if file.name == "Main" then
            [ H.div
                [ HA.class "w-6"
                ]
                [ H.i
                    [ HA.class "gg-file-document"
                    , HA.class "mr-2"
                    ]
                    []
                ]
            , H.span
                [ HA.class "whitespace-nowrap text-left flex-1 w-full"
                ]
                [ H.text (file.name ++ file.extension)
                ]
            ]
         else
            [ H.div
                [ HA.class "w-6"
                ]
                [ H.i
                    [ HA.class "gg-file-document"
                    , HA.class "mr-2"
                    ]
                    []
                ]
            , H.div
                [ HA.class "flex items-center w-full"
                ]
                [ H.span
                    [ HA.class "whitespace-nowrap"
                    , HA.class "flex-1 w-full text-left"
                    ]
                    [ H.text (file.name ++ file.extension)
                    ]
                , H.button
                    [ HE.onClick (OnSideBarDeleteFileButtonClicked file.name)
                    , HA.class "mr-2"
                    ]
                    [ H.i
                        [ HA.class "gg-trash"
                        ]
                        []
                    ]
                , H.button
                    [ HE.onClick (OnUpdateFileNameButtonClicked file.name)
                    ]
                    [ H.i
                        [ HA.class "gg-rename"
                        ]
                        []
                    ]
                ]
            ]
        )



-- MODALS


viewModal : Model -> Array (H.Html Msg) -> H.Html Msg
viewModal model children =
    H.div
        [ HA.class "w-full h-full"
        , HA.class "fixed top-0 left-0"
        , HA.class "flex justify-center items-center"
        , HA.class "bg-black bg-opacity-50"
        ]
        children


viewCreateNewFileModal : Model -> H.Html Msg
viewCreateNewFileModal model =
    viewModal
        model
        [ H.div
            [ HA.class "bg-white rounded"
            , HA.class "p-4 shadow"
            ]
            [ H.input
                [ HA.class "w-full"
                , HA.class "h-8"
                , HA.class "bg-white"
                , HA.class "text-black"
                , HA.class "p-2"
                , HA.class "border-2 border-black"
                , HA.class "border-solid"
                , HA.class "rounded"
                , HA.class "outline-none"
                , HA.placeholder "File name"
                , HA.value model.newFileName
                , HE.onInput OnNewFileNameChanged
                ]
                []
            , H.div
                [ HA.class "w-full"
                , HA.class "flex justify-between items-center"
                , HA.class "mt-4"
                ]
                [ H.button
                    [ HE.onClick OnNewFileModalSaveButtonClicked
                    ]
                    [ H.text "Create File"
                    ]
                , H.button
                    [ HE.onClick OnNewFileModalCloseButtonClicked
                    ]
                    [ H.text "Cancel"
                    ]
                ]
            ]
        ]


viewDeleteFileModal : Model -> String -> H.Html Msg
viewDeleteFileModal model fileName =
    viewModal
        model
        [ H.div
            [ HA.class "bg-white rounded"
            , HA.class "p-4 shadow"
            ]
            [ H.div
                [ HA.class "w-full"
                , HA.class "flex justify-between items-center"
                , HA.class "mt-4"
                ]
                [ H.text ("Are you sure you want to delete " ++ fileName ++ "?")
                ]
            , H.div
                [ HA.class "w-full"
                , HA.class "flex justify-between items-center"
                , HA.class "mt-4"
                ]
                [ H.button
                    [ HE.onClick (OnDeleteFileModalConfirmButtonClicked fileName)
                    ]
                    [ H.text "DELETE"
                    ]
                , H.button
                    [ HE.onClick OnDeleteFileModalCancelButtonClicked
                    ]
                    [ H.text "Cancel"
                    ]
                ]
            ]
        ]


viewUpdateFileNameModal : Model -> String -> H.Html Msg
viewUpdateFileNameModal model newFileName =
    viewModal
        model
        [ H.div
            [ HA.class "bg-white rounded"
            , HA.class "p-4 shadow"
            ]
            [ H.input
                [ HA.class "w-full"
                , HA.class "h-8"
                , HA.class "bg-white"
                , HA.class "text-black"
                , HA.class "p-2"
                , HA.class "border-2 border-black"
                , HA.class "border-solid"
                , HA.class "rounded"
                , HA.class "outline-none"
                , HA.placeholder "File name"
                , HA.value newFileName
                , HE.onInput OnUpdateFileNameModalFileNameChanged
                ]
                []
            , H.div
                [ HA.class "w-full"
                , HA.class "flex justify-between items-center"
                , HA.class "mt-4"
                ]
                [ H.button
                    [ HE.onClick OnUpdateFileNameModalConfirmButtonClicked
                    ]
                    [ H.text "Update"
                    ]
                , H.button
                    [ HE.onClick OnUpdateFileNameModalCancelButtonClicked
                    ]
                    [ H.text "Cancel"
                    ]
                ]
            ]
        ]
